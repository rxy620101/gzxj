<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.system.mapper.SysColleageMajorMapper">

	<resultMap type="SysColleageMajor" id="SysDeptResult">
		<id     property="collegeId"     column="college_id"     />
		<result property="parentId"   column="parent_id"   />
		<result property="ancestors"  column="ancestors"   />
		<result property="name"   column="name"   />
		<result property="orderNum"   column="order_num"   />
		<result property="status"     column="status"      />
		<result property="delFlag"    column="del_flag"    />
		<result property="parentName" column="parent_name" />
		<result property="createBy"   column="create_by"   />
		<result property="createTime" column="create_time" />
		<result property="updateBy"   column="update_by"   />
		<result property="updateTime" column="update_time" />
	</resultMap>
	
	<sql id="selectDeptVo">
        select d.college_id, d.parent_id, d.ancestors, d.name, d.order_num,d.status, d.del_flag, d.create_by, d.create_time 
        from college_major d
    </sql>
    
	<select id="selectDeptList" parameterType="SysColleageMajor" resultMap="SysDeptResult">
        <include refid="selectDeptVo"/>
        where d.del_flag = '0'
		<if test="collegeId != null and collegeId != 0">
			AND college_id = #{collegeId}
		</if>
        <if test="parentId != null and parentId != 0">
			AND parent_id = #{parentId}
		</if>
		<if test="name != null and name != ''">
			AND name like concat('%', #{name}, '%')
		</if>
		<if test="status != null and status != ''">
			AND status = #{status}
		</if>
		<!-- 数据范围过滤 -->
		${params.dataScope}
		order by d.parent_id, d.order_num
    </select>
    
<!--    <select id="selectDeptListByRoleId" resultType="Long">-->
<!--		select d.college_id-->
<!--		from college_major d-->
<!--            left join sys_role_dept rd on d.college_id = rd.college_id-->
<!--        where rd.role_id = #{roleId}-->
<!--            <if test="deptCheckStrictly">-->
<!--              and d.college_id not in (select d.parent_id from college_major d inner join sys_role_dept rd on d.college_id = rd.college_id and rd.role_id = #{roleId})-->
<!--            </if>-->
<!--		order by d.parent_id, d.order_num-->
<!--	</select>-->
    
    <select id="selectDeptById" parameterType="Long" resultMap="SysDeptResult">
		<include refid="selectDeptVo"/>
		where college_id = #{deptId}
	</select>
    
    <select id="checkDeptExistUser" parameterType="Long" resultType="int">
		select count(1) from sys_user where college_id = #{deptId} and del_flag = '0'
	</select>
	
	<select id="hasChildByDeptId" parameterType="Long" resultType="int">
		select count(1) from college_major
		where del_flag = '0' and parent_id = #{deptId} limit 1
	</select>
	
	<select id="selectChildrenDeptById" parameterType="Long" resultMap="SysDeptResult">
		select * from college_major where find_in_set(#{deptId}, ancestors)
	</select>
	
	<select id="selectNormalChildrenDeptById" parameterType="Long" resultType="int">
		select count(*) from college_major where status = 0 and del_flag = '0' and find_in_set(#{deptId}, ancestors)
	</select>
	
	<select id="checkDeptNameUnique" resultMap="SysDeptResult">
	    <include refid="selectDeptVo"/>
		where name=#{name} and parent_id = #{parentId} limit 1
	</select>
    
    <insert id="insertDept" parameterType="SysColleageMajor">
 		insert into college_major(
 			<if test="collegeId != null and collegeId != 0">college_id,</if>
 			<if test="parentId != null and parentId != 0">parent_id,</if>
 			<if test="name != null and name != ''">name,</if>
 			<if test="ancestors != null and ancestors != ''">ancestors,</if>
 			<if test="orderNum != null and orderNum != ''">order_num,</if>
 			<if test="status != null">status,</if>
 			<if test="createBy != null and createBy != ''">create_by,</if>
 			create_time
 		)values(
 			<if test="collegeId != null and collegeId != 0">#{collegeId},</if>
 			<if test="parentId != null and parentId != 0">#{parentId},</if>
 			<if test="name != null and name != ''">#{name},</if>
 			<if test="ancestors != null and ancestors != ''">#{ancestors},</if>
 			<if test="orderNum != null and orderNum != ''">#{orderNum},</if>
 			<if test="status != null">#{status},</if>
 			<if test="createBy != null and createBy != ''">#{createBy},</if>
 			sysdate()
 		)
	</insert>
	
	<update id="updateDept" parameterType="SysColleageMajor">
 		update college_major
 		<set>
 			<if test="parentId != null and parentId != 0">parent_id = #{parentId},</if>
 			<if test="name != null and name != ''">name = #{name},</if>
 			<if test="ancestors != null and ancestors != ''">ancestors = #{ancestors},</if>
 			<if test="orderNum != null and orderNum != ''">order_num = #{orderNum},</if>
 			<if test="status != null and status != ''">status = #{status},</if>
 			<if test="updateBy != null and updateBy != ''">update_by = #{updateBy},</if>
 			update_time = sysdate()
 		</set>
 		where college_id = #{collegeId}
	</update>
	
	<update id="updateDeptChildren" parameterType="java.util.List">
	    update college_major set ancestors =
	    <foreach collection="depts" item="item" index="index"
	        separator=" " open="case deptId" close="end">
	        when #{item.collegeId} then #{item.ancestors}
	    </foreach>
	    where college_id in
	    <foreach collection="depts" item="item" index="index"
	        separator="," open="(" close=")">
	        #{item.collegeId}
	    </foreach>
	</update>
	 
	<update id="updateDeptStatusNormal" parameterType="Long">
 	    update college_major set status = '0' where college_id in
 	    <foreach collection="array" item="collegeId" open="(" separator="," close=")">
        	#{collegeId}
        </foreach>
	</update>
	
	<update id="deleteDeptById" parameterType="Long">
		update college_major set del_flag = '2' where college_id = #{deptId}
	</update>

	<select id="selectIdbyName" parameterType="String" resultType="Long">
		select college_id from college_major where name=#{majorName}
	</select>

	<select id="selectIdsByNames" parameterType="String" resultType="Long">
		select college_id from college_major where name in
		<foreach collection="array" item="majorName" open="(" separator="," close=")">
			#{majorName}
		</foreach>
	</select>
	<select id="selectAllByParentId" parameterType="Long" resultMap="SysDeptResult">
		select * from college_major where parent_id=#{parentId}
	</select>

	<select id="selectMajorNames" parameterType="Long" resultType="String">
       select name from college_major where college_id in
		<foreach collection="array" item="collegeId" open="(" separator="," close=")">
			#{collegeId}
		</foreach>
	</select>

</mapper> 